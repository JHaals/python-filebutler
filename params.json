{"name":"Python-filebutler","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"python-filebutler\r\n========================\r\n\r\nfilebutler is a small web app based on flask that allows you to upload(post) files over http/https and get a sha1 link in return.\r\nfilebutler uses sqlite as backend to keep track of files.\r\n\r\nI suggest that you use python-filebutler together with [filebutler-upload](http://github.com/jhaals/filebutler-upload \"filebutler-upload\") or write your own upload app.\r\n\r\nFeatures\r\n---------\r\n\r\n###### Authentication\r\nUser/Password authentication to upload files.\r\nPasswords are stored hmac encrypted.\r\n###### Password protected files\r\nAbility to password protect your files.\r\n###### One time download\r\nYour file will only be available for one download.\r\n###### Expire date\r\nAbility to set expire date. 1 hour, 1 day, 1 week, 1 month\r\n###### File Management\r\nList/delete uploaded files\r\n###### Upload form\r\nUpload form for non-tech people\r\n\r\nUsage\r\n------\r\n\r\nHeaders must be set to __Accept: application/json__ else html will be returned\r\n\r\n#### Upload file\r\n\r\nSend POST to data to __/__ containing these fields.\r\n\r\n    file (mandatory(the file you wish to upload))\r\n    username (mandatory)\r\n    password (mandatory)\r\n    download_password (optional)\r\n    one_time_download (optional or 1)\r\n    expire (optional or 1h, 1d, 1w or 1m)\r\n\r\n#### Delete file\r\n\r\nSend POST to __/{hash}/delete__ containing these fields.\r\n\r\n    username\r\n    password\r\n\r\n#### List files\r\n\r\nSend POST to __/files__ containing these fields.\r\n\r\n    username\r\n    password\r\n\r\n\r\nReturns\r\n\r\n    {\"message\":\r\n        {u'f9ad45eec5bc050a9f529f1ca403r0f0591390081': {\r\n            u'upload_date': u'20121014151736',\r\n            u'one_time_download': True,\r\n            u'expire': u'0',\r\n            u'filename': u'somefile.jpg'}\r\n        },\r\n        {u'f9ad45eec5bc050a9f529f13a4750f0591390081': {\r\n            u'upload_date': u'20121014151736',\r\n            u'one_time_download': False,\r\n            u'expire': u'0',\r\n            u'filename': u'pictures.zip'}\r\n        }\r\n    }\r\n\r\nupload date format: %Y%m%d%H%M%S\r\n\r\n##### Response format\r\nFilebutler will return a json encoded message and throw http status codes.\r\nA successful upload will return status code 200 and a URL\r\n\r\n    { \"message\": \"http://upload.example.com/download?u=f1d2d2f924e986ac86fdf7b36c94bcdf32beec15\" }\r\n\r\n#### manage.py\r\n\r\nPerform management operations such as create/delete users.\r\n\r\navailable commands:\r\n\r\n    --add-user <username>\r\n    --delete-user <username>\r\n    --change-password <username>\r\n    --delete-expired-data\r\n\r\nExpired files that's never been downloaded won't get removed automatically.\r\nIt's recommended to run --delete-expired-data periodically to clean storage and database from expired files\r\n\r\nInstallation\r\n-----\r\n\r\nInstall python requirements using pip\r\n\r\n    pip install -r requirements.txt\r\n\r\n-   configure ppupload.conf and place it under /etc/filebutler.conf\r\n-   create the directory specified as storage_path in filebutler.conf\r\n-   changed the secret_key in filebutler.conf\r\n-   Create users via manage.py --add-user <username>\r\n-   Run main.py\r\n\r\n### Deployment\r\nSimple deployment examples can be found at http://flask.pocoo.org/\r\n\r\n\r\n","tagline":"minimalistic file sharing service"}